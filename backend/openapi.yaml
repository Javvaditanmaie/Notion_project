openapi: 3.0.0
info:
  title: Collaborative Document Editor API
  version: 1.0.0
  description: OpenAPI spec for Notion-like collaborative editor with Yjs, Firebase, and WebSockets.

servers:
  - url: http://localhost:5000

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /api/token:
    post:
      summary: Exchange Firebase token for JWT
      tags:
        - Auth
      security:
        - bearerAuth: []    # Disables default JWT requirement
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          example: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6Ij...
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: JWT token issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string


  /api/docs:
    get:
      summary: Get all documents owned by the current user
      tags:
        - Documents
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'

    post:
      summary: Create a new document
      tags:
        - Documents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        '200':
          description: Document created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string

  /api/docs/{id}:
    get:
      summary: Get a single document by ID
      tags:
        - Documents
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          description: Document not found

    put:
      summary: Update title or content of a document
      tags:
        - Documents
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        '200':
          description: Document updated
        '403':
          description: Unauthorized

    delete:
      summary: Delete a document
      tags:
        - Documents
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document deleted
        '403':
          description: Forbidden

  /api/docs/{id}/favorite:
    put:
      summary: Toggle favorite status of a document
      tags:
        - Documents
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Favorite status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  favorite:
                    type: boolean
        '403':
          description: Forbidden

components:
  schemas:
    Document:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        access:
          type: string
          enum: [edit, view, none]
        favorite:
          type: boolean
        owner:
          type: string
        createdAt:
          type: string
          format: date-time

